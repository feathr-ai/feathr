{
  "sources": {
    "source1": {
      "location": {
        "path": "source-simple.json"
      }
    },
    "source2": {
      "location": {
        "path": "source-simple.json"
      },
      "hasTimeSnapshot": false
    },

    "source23": {
      "location": {
        "path": "source-simple.json"
      },
      "hasTimeSnapshot": "False"
    },
    "MemberStdCmp": {
      "type": "ESPRESSO",
      "database": "StandardizationEI",
      "table": "MemberStandardizedCompany",
      "d2Uri": "d2://ESPRESSO_MT2"
      "keyExpr": "key[0]"
    },
    "JYMBIIMemberFeatures": {
      "type": "VENICE",
      "storeName": "JYMBIIMemberFeatures",
      "keyExpr": "com.linkedin.jobs.relevance.frame.online.util.AvroKeyGeneratorJymbiiMemberSourceKey.getKey(key[0])",
    },
    "MemberPreferenceData": {
      "type": "RESTLI",
      "restResourceName": "jobSeekers",
      "keyExpr": "member"
    },
    "MemberPreferenceData2": {
      "type": "RESTLI",
      "restResourceName": "jobSeekers",
      "restEntityType": "member"
    },
    "MemberPreferenceData3": {
      "type": "RESTLI",
      "restResourceName": "jobSeekers",
      "finder": "rule"
    },
    "memberDerivedData": {
      "type": "RESTLI",
      "restResourceName": "memberDerivedData",
      "restEntityType": "member",
      "pathSpec": "standardizedSkills,standardizedIndustries,standardizedProfileIndustries,standardizedLocation,standardizedEducations,standardizedPositions"
    },
    "CareersMemberEntityEmbeddings-0.0.2": {
      "type": "VENICE",
      "storeName": "CareersMemberEntityEmbeddings",
      "keyExpr": "{\"entityUrn\" : new com.linkedin.common.urn.Urn(\"member\", key[0]).toString(), \"version\" : \"0.0.2\"}"
    },

    "kafkaTestSource": {
      "type": "KAFKA",
      "stream": "kafka.testCluster.testTopic"
    },
    "rocksDBTestSource": {
      "type": "ROCKSDB",
      "referenceSource": "kafkaTestSource",
      "extractFeatures": true,
      "encoder": "com.linkedin.frame.online.config.FoobarExtractor",
      "decoder": "com.linkedin.frame.online.config.FoobarExtractor",
      "keyExpr": "keyExprName"
    },
    "rocksDBTestSourceWithoutKeyExpr": {
      "type": "ROCKSDB",
      "referenceSource": "kafkaTestSource",
      "extractFeatures": true,
      "encoder": "com.linkedin.frame.online.config.FoobarExtractor",
      "decoder": "com.linkedin.frame.online.config.FoobarExtractor",
    },
    "jobScoringEntity": {
      "type": "PASSTHROUGH",
      "dataModel": "com.linkedin.jobsprediction.JobScoringEntity"
    },
    "jobScoringEntityCustomSource": {
      "type": "CUSTOM",
      "keyExpr": "key[0]",
      "dataModel": "com.linkedin.jobsprediction.JobScoringEntity"
    },
    "hiringProjectCandidates": {
      type: RESTLI
      restResourceName: "hiringProjectCandidates"
      keyExpr: "toCompoundKey({\"hiringContext\": toUrn(\"contract\", key[0]), \"hiringProject\": toUrn(\"hiringProject\", toUrn(\"contract\", key[0]), key[1])})"
      finder: "hiringProject"
      restReqParams: {
        CandidateHiringStates: {mvel: "[toUrn(\"candidateHiringState\", toUrn(\"contract\", key[0]), key[2])]"},
      }
    },
    "MemberConnectionIntersection": {
      "type": "RESTLI",
      "restResourceName": "setOperations",
      "restEntityType": "member",
      "restReqParams": {
        "operator": "INTERSECT",
        "edgeSetSpecifications": {
          "jsonArray": "{\"array\": [{\"firstEdgeType\":\"MemberToMember\", \"secondEdgeType\":\"MemberToMember\"}]}"
        },
        "second": {
          "mvel": "key[1]"
        },
        "a":{
          "file":"sd"
        }
      }
    },
    "contentShareWindowAggLegacySource": {
      "type": "HDFS",
      "location": {
        "path": "/jobs/mlf/contentShareFeatures/daily"
      },
      "isTimeSeries": "true",
      "timeWindowParameters": {
        "timestamp": "timestamp",
        "timestamp_format": "yyyy/MM/dd"
      }
    },
    "contentShareWindowAggSource": {
      "type": "HDFS",
      "location": {
        "path": "/jobs/mlf/contentShareFeatures/daily"
      },
      "timePartitionPattern": "yyyy/MM/dd",
      "timeWindowParameters": {
        "timestampColumn": "timestamp",
        "timestampColumnFormat": "yyyy/MM/dd"
      }
    },
    "sourceWithTimeAwarePath": {
      "type": "HDFS",
      "location": {
        "path": "/jobs/mlf/contentShareFeatures/daily"
      },
      "timePartitionPattern": "yyyy/MM/dd"
    },

    "couchbaseTestSource": {
      "type": "COUCHBASE",
      "bucketName": "testBucket"
      "keyExpr": "key[0]",
      "bootstrapUris": ["some-app.corp.linkedin.com:8091", "other-app.corp.linkedin.com:8091"],
      "documentModel": "com.linkedin.frame.online.SomeDocumentClass"
    },
    "couchbaseTestSource2": {
      "type": "COUCHBASE",
      "bucketName": "testBucket"
      "keyExpr": "key[0]",
      "documentModel": "com.linkedin.frame.online.SomeDocumentClass"
    },
    ContentTopic: {
      location: {path: "/data/databases/TopicTags/AlgorithmicTopicTagsV2/#LATEST"}
    },
    "recentPageViewsSource": {
       "type": "PINOT"
       "resourceName": "recentMemberActionsPinotQuery"
       "queryTemplate":  "SELECT objectAttributes, timeStampSec FROM RecentMemberActions WHERE actorId IN (?) AND timeStampSec > ? ORDER BY timeStampSec DESC LIMIT 1000"
       "queryArguments":  ["key[0]", "System.currentTimeMillis()/1000 - 2 * 24 * 60 * 60"]
       "queryKeyColumns": ["actorId"]
    }
  },
  "anchors": {
    accessTimeFeatures: {
      source: "/jobs/emerald/Features/LatestFeatures/accessTimeStats/#LATEST",
      key.sqlExpr: "x",
      keyAlias: "x",
      features: {
        // Using same default value as in emerald
        abuse_member_accessTime_lastVisitedTime: {
          def.sqlExpr: "lastVisitedTime",
          default: 0.0,
          type: "NUMERIC"
        }
        abuse_member_accessTime_daysSinceLastVisitedTime: {
          def.sqlExpr: "daysSinceLastVisitedTime",
          default: 0.0,
          type: "NUMERIC"
        }
      }
    }

    industry-local: {
     source: "LocalSQLAnchorTest/industry.avro.json"
     key.sqlExpr: industryId
     features: {
        waterloo_member_geoCountry_local.def.sqlExpr: "geoStdData.countryCode"
     }
    }

    // this is an existing in production feature definition waterloo-member-derived-data-skills-by-source-v5
    // it contains extractor, and MVEL feature definition together
    "test-member-derived-data-skills-by-source-v5": {
      source: "memberDerivedData-skillV5"
      extractor: {class: "com.linkedin.frame.feature.online.TestMemberSkillV5TermVectorTransformer"}
      features: {
        test_member_standardizedSkillsV5_explicit:
          """standardizedSkills == null ? [] :
             ([getIdFromRawUrn($.skill.entity) : $.skill.score] in standardizedSkills if ($.skillSource == 'EXPLICIT'))"""
        test_member_standardizedSkillsV5_implicit:
          """standardizedSkills == null ? [] :
             ([getIdFromRawUrn($.skill.entity) : $.skill.score] in standardizedSkills if ($.skillSource == 'IMPLICIT'))"""
      }
    }

    "test-member-derived-data-skills-by-source-v5-with-type": {
      source: "memberDerivedData-skillV5"
      extractor: {class: "com.linkedin.frame.feature.online.TestMemberSkillV5TermVectorTransformer"}
      features: {
        test_member_standardizedSkillsV5_explicit_type: {
          def: "mvel",
          default: 0
          type: NUMERIC
        }
        test_member_standardizedSkillsV5_implicit_type: {
          def: "mvel",
          default: 0
          type: {
            type: VECTOR
          }
        }
      }
    }

    waterloo-member-geolocation-local: {
      source: "LocalSQLAnchorTest/member.avro.json"
      key.sqlExpr: "x"
      features: {
        MemberIndustryId: {
          def.sqlExpr: profileIndustryId
          default: 1
          type: NUMERIC
        }
      }
    }

    swaAnchorWithKeyExtractor: {
      source: "swaSource"
      keyExtractor: "com.linkedin.frame.offline.SimpleSampleKeyExtractor"
      features: {
        f3: {
          def: "aggregationWindow"
          aggregation: SUM
          window: 3d
          type: {
            type: "NUMERIC"
            shape: [10, 10]
            dimensionType: ["INT", "INT"]
            valType: "FLOAT"
          }
        }
      }
    }

      careers-member-lix-segment: {
        source: "/data/derived/lix/euc/member/#LATEST"
        key: "id"
        features: {
          careers_member_lixSegment_isJobSeeker: {
            def: "job_seeker_class == 'active'",
            type: "BOOLEAN"
          }
        }
      }

    "member-sent-invitations": {
      "source": "/jobs/frame/inlab/data/features/InvitationStats",
      "key": "x",
      "lateralViewParameters": {
        "lateralViewDef": "explode(features)",
        "lateralViewItemAlias": "feature"
      },
      "features": {
        "member_sentInvitations_numIgnoredRejectedInvites": {
          "def": "toNumeric(numIgnoredRejectedInvites)",
          "default": "123",
          type: "BOOLEAN"
        }
      }
    },
    "featuresWithKey": {
      "source": "/data/test/#LATEST",
      "key": "x",
      "keyAlias": "x",
      "features": {
        "waterloo_member_geoCountry": "geoStdData.countryCode"
      }
    },
    nearLineFeatureAnchor: {
      source: kafkaTestSource,
      key.mvel: mid,
      features: {
        maxPV12h: {
          def.mvel: pageView,
          aggregation: MAX,
          windowParameters: {
              type: SLIDING,
              size: 1h,
              slidingInterval: 10m,
            },
          groupBy: pageKey,
          filter.mvel: "$.getAsTermVector().keySet()"
        }
      }
    },
    pageViewCountAnchor: {
      source: "PageViewEvent"
      key: "header.x"
      features: {
        "pageViewCount4h" : {
          def: "pageType"
          aggregation: "MAX_POOLING"
          windowParameters: {
            type: SLIDING
            size: 1m
            slidingInterval: 10s
          }
        }
      }
    },
    SWAfeatureWithMinAgg: {
        source: partitionedHDFSSource
            key: "x"
            features: {
            SWAfeatureWithMinAgg: {
                def: count
                aggregation: MIN
                window: 2d
            }
        }
    }
    "featuresWithOnlyMVEL": {
      "source": "/data/test/#LATEST",
      "features": {
        "waterloo_member_geoCountry": "geoStdData.countryCode",
        "waterloo_member_geoRegion": "geoStdData.countryCode + ':' + geoStdData.regionCode"
      }
    },
    "featuresWithTransformer": {
      "source": "/data/databases/CareersPreferenceDB/MemberPreference/#LATEST",
      "transformer": "com.linkedin.jymbii.frame.anchor.PreferencesFeatures",
      "keyAlias": "x",
      "features": [
        "jfu_preference_companySize,",
        "jfu_preference_seniority,",
        "jfu_preference_industry,",
        "jfu_preference_industryCategory,",
        "jfu_preference_location"
      ]
    },
    "featuresWithTransformerAndExtract": {
      "source": "/jobs/liar/jymbii-features-engineering/production/memberFeatures/education/#LATEST",
      "transformer": "com.linkedin.jymbii.frame.anchor.LegacyFeastFormattedFeatures",
      "features": [
        "jfu_member_degree"
      ],
      "extract": [
        {
          "extract": "member_degree",
          "as": "jfu_member_degree"
        }
      ]
    },
    "flagship-viralActionAffinityWithActorFrame-1-0": {
      source: "FeedViewerTensorStore"
      extractor: {"class": "com.linkedin.flagship.frame.extractor.SingleTensorDataExtractor"}
      features: {
        flagship-viralActionAffinityWithActorFrame-1-0 : {
        type: "TENSOR"
        }
      }
    },
    "flagship-viewerFrame-1-0": {
      source: "FeedViewerTensorStore"
      features: {
        flagship-viralActionAffinityWithActorFrame-1-0 : {
          def: "viewer"
          type: "TENSOR"
        }
      }
    },
    "flagship-viewerFrame-2-0": {
      source: "FeedViewerTensorStore"
      features: {
        flagship-viralActionAffinityWithActorFrame-2-0 : {
          def: "viewer"
          type: {
            type: "TENSOR"
            tensorCategory: "DENSE"
            shape: [10]
            dimensionType: ["INT"]
            valType: FLOAT
          }
        }
      }
    },
    "featuresWithExtractor": {
      "source": "/data/databases/CareersPreferenceDB/MemberPreference/#LATEST",
      "extractor": "com.linkedin.jymbii.frame.anchor.PreferencesFeatures",
      "keyAlias": "x",
      "features": [
        "jfu_preference_companySize"
      ]
    } ,
    "featuresWithExtractorClass": {
      "source": "/data/databases/CareersPreferenceDB/MemberPreference/#LATEST",
      "key": "mockKey"
      "extractor": {"class":"com.linkedin.jymbii.frame.anchor.PreferencesFeatures"},
      "features": [
        "jfu_preference_companySize,"
      ]
    },
    "contentShareWindowAggAnchor": {
      "source": "contentShareWindowAggSource",
      "key": "id",
      "keyAlias": "x",
      "features": {
        "fc_feed_7d_share_third_party_article_count": {
          "def": "thirdPartyArticleCount",
          "aggregation": "SUM",
          "window": "7d",
          type: "BOOLEAN"
        }
      }
    }

    couchbase-features: {
      source: "couchbaseTestSource"
      extractor: {"class": "com.linkedin.frame.extractor.CustomFeatureExtractor"}
      features: [
        couchbase-one-sample-feature,
        couchbase-another-sample-feature
      ]
    }

    couchbase-features-with-params: {
      source: "couchbaseTestSource"
      extractor: {
        class: "com.linkedin.frame.extractor.CustomFeatureExtractor"
        params: {
          abc: "test_string"
          features: [comm_influenceScore, other_comm_influenceBucket, simpleSWAFeature]
          columnName: "testColumn"
        }
      }
      features: [
        couchbase-one-sample-feature-with-params,
        couchbase-another-sample-feature-with-params
      ]
    },
    jobActivityCareersJobEmbedding100Anchor: {
      source: "jobActivityCareersJobEmbedding100FactTableSource"
      key: "substring(header.x,15)"
      features: {
        mlf_member_jobActivityCareersJobEmbedding100_jobApply_avg_4d: {
          def: "careersJobEmbedding"
          filter: "action IN ('APPLY_OFFSITE', 'APPLY_ONSITE')"
          aggregation: AVG_POOLING
          window: 4d
          embeddingSize: 200
          default: 0.0,
          type: "NUMERIC"
        }
      }
    }

    offlineAnchor4: {
      source: "/test/test/test/#LATEST"
      extractor: "com.linkedin.frame.offline.anchor.test.Extractor4"
      keyExtractor: "com.linkedin.frame.offline.anchor.test.KeyExtractor4"
      features: [
        "offline_feature4_1",
        "offline_feature4_2"
      ]
    },
    "recentPageViewsAnchor": {
      source: "recentPageViewsSource"
      extractor: "com.linkedin.flagship.search.PinotPageViewFeaturesExtractor"
      features: [
        "recent_page_views"
      ]
    },
    "mostRecentJobApplyAnchor": {
      source: "mostRecentJobApplySource"
      extractor: "com.linkedin.flagship.search.PinotJobApplyFeaturesExtractor"
      features: [
        "most_recent_job_apply"
      ]
    }
  },
  "derivations": {
    "waterloo_member_summary_alias": "waterloo_member_summary",
    abuse_member_invitation_inboundOutboundSkew:{
      sqlExpr: "case when abuse_member_invitation_numInviters = 0 then -1 else abuse_member_invitation_numInvites/abuse_member_invitation_numInviters end"
    },
    simpleMvelDerivedTypeCast: {
      definition: simpleHDFSMvelCount
      type: CATEGORICAL
    },
    sessions_v2_macrosessions_sum_sqrt_7d: {
      key: id
      inputs: {
        sessions_v2_macrosessions_sum_7d: {key: id, feature: sessions_v2_macrosessions_sum_7d},
      }
      definition.sqlExpr: "sqrt(sessions_v2_macrosessions_sum_7d)"
      type: "NUMERIC"
    },
    "jfu_member_placeSimTopK": {
      "key": [
        "member"
      ],
      "inputs": [
        {
          "key": "member",
          "feature": "jfu_resolvedPreference_location"
        }
      ],
      "class": "com.linkedin.jymbii.nice.derived.MemberPlaceSimTopK"
      type: "NUMERIC"
    },
    "waterloo_member_pastTitleString:waterloo_job_standardizedSkillsString": {
      "key": [
        "m",
        "j"
      ],
      "inputs": {
        "a": {
          "key": "m",
          "feature": "waterloo_member_pastTitleString"
        },
        "b": {
          "key": "j",
          "feature": "waterloo_job_standardizedSkillsString"
        }
      },
      "definition": "cosineSimilarity(a, b)",
       type: "NUMERIC"
    },
    seq_join_feature1: {
      key: "x"
      join: {
        base: { key: x, feature: MemberIndustryId }
        expansion: { key: skillId, feature: MemberIndustryName }
      }
      aggregation:""
      type: "NUMERIC"
    },
    seq_join_feature2: {
      key: "x"
      join: {
        base: { key: x,
          feature: MemberIndustryId,
          outputKey: x,
          transformation: "import com.linkedin.frame.MyFeatureUtils; MyFeatureUtils.dotProduct(MemberIndustryId);"}
        expansion: { key: skillId, feature: MemberIndustryName }
      }
      aggregation:"ELEMENTWISE_MAX"
      type: "NUMERIC"
    },
    seq_join_feature3: {
      key: "x"
      join: {
        base: { key: x,
          feature: MemberIndustryId,
          outputKey: x,
          transformationClass: "com.linkedin.frame.MyFeatureTransformer"}
        expansion: { key: skillId, feature: MemberIndustryName }
      }
      aggregation:"ELEMENTWISE_AVG"
    },
    seq_join_feature4: {
      key: "x"
      join: {
        base: { key: x,
          feature: MemberIndustryId,
          outputKey: x}
        expansion: { key: skillId, feature: MemberIndustryName }
      }
      aggregation:"ELEMENTWISE_AVG"
    }
    seq_join_feature5: {
      key: "x"
      join: {
        base: { key: x,
          feature: MemberIndustryId,
          outputKey: x}
        expansion: { key: skillId, feature: MemberIndustryName }
      }
      aggregation:"ELEMENTWISE_SUM"
    }
  },
  "advancedDerivations": [
    {
      "features": [
        "quasarScoreFeature"
      ],
      "key": [
        "mId",
        "jId"
      ],
      "inputs": "PROVIDED_BY_CLASS",
      "class": {
        "name": "com.linkedin.frame.quasar.DerivationWithQuasarDSL",
        "quasarModelFile": "/quasarModels/testModel2.quasar",
        "modelParam": {
          "a": 1,
          "b": {
            "c": 2
          }
        }
      }
    },
    {
      "features": [
        "M",
        "N"
      ],
      "key": [
        "x",
        "y"
      ],
      "inputs": {
        "nc": {
          "key": "x",
          "feature": "C"
        },
        "nd": {
          "key": "y",
          "feature": "D"
        }
      },
      "class": "com.linkedin.frame.offline.SampleAdvancedDerivationFunctionExtractor"
    },
    {
      "features": [
        "Q"
      ],
      "key": [
        "x",
        "y"
      ],
      "inputs": {
        "nc": {
          "key": "x",
          "feature": "C"
        },
        "nd": {
          "key": "y",
          "feature": "D"
        }
      },
      "class": "com.linkedin.frame.offline.SampleAdvancedDerivationFunctionExtractor"
    },
    {
      "features": [
        "P"
      ],
      "key": [
        "x",
        "y"
      ],
      "inputs": {
        "nc": {
          "key": "x",
          "feature": "C"
        },
        "nd": {
          "key": "y",
          "feature": "D"
        }
      },
      "class": {
        "name": "com.linkedin.frame.offline.SampleAdvancedDerivationFunctionExtractor",
        "onlyProduceP": true
      }
    }
  ],
  "features": {
    "careers": {
      "careers_preference_companySize": {
        "version": "1.0",
        "dims": [],
        "valType": "INT",
        "availability": "ONLINE"
      }
    }
  },

  "dimensions": {
    "careers": {
      "dim1": {
        "version": "4.2",
        "type": "DISCRETE"
      }
    }
  }
}