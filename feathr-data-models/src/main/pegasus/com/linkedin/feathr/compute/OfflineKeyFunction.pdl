// LINT_SUPPRESS: namespace.three.parts

namespace com.linkedin.feathr.compute

/**
 * Represents a feature's key that is extracted from each row of an offline data source and is used to join with observation data to form a training dataset. This class is expected to be included so the definitions of enclosed fields can be reused.
 */
record OfflineKeyFunction {

/**
 * Key function specifies how to extract the feature's key from each row of the offline data source. For example, an offline dataset has x field, a key function being defined as getIdFromUrn(x) means the feature key is a numeric member id, which can later be used to join with observation data that also has numeric member id column. A feature's key can have one key part or multiple key parts (compound key). This field should be required, keeping it optional for fulfilling backward compatiblity requirement during schema evolution.
 */
keyFunction: optional union[
//MVEL-based key function. It can either be a simple reference to a field name in the offline dataset, or apply some trasformations on top of some columns.
    MvelExpression

//SparkSql-based key function. Note this is experimental and can be deprecated in near future.
    SqlExpression

//UDF-based key function. It is useful when key function can't be written easily with an expression language like MVEL. For more details, refer to SourceKeyExtractor interface in above doc link.
    UserDefinedFunction
]
}
