// LINT_SUPPRESS: namespace.three.parts

namespace com.linkedin.feathr.config.join

/**
 * JoiningFeature is the feature section of the join config. This section consists of information pertaining to a feature
 * which is to be joined:-
 * a. The join keys of the input data, with which this feature is to be joined.
 * b. name of the feature
 * c. optional timeRange of the input data which is to be joined with this feature.
 * d. optional overrideTimeDelay if this feature needs a different simulate time delay other than the one mentioned.
 *
 * This is a required section of the the join config.
 * Example,
 *   a. JoiningFeature{
 *        keys: ["key1"]
 *        frameFeatureName: "feature1"
 *        AbsoluteDateRange(startDate: Date(year=2020, month=5, day=5),
 *                         endDate: Date(year=2020, month=5, day=7))
 *      }
 *   b. JoiningFeature{
 *        keys: ["key1"]
 *        frameFeatureName: "feature2"
 *        overrideTimeDelay: TimeDelay(length=1, unit="DAY")
 *    }
 *   c. JoiningFeature{
 *        keys: ["key1"]
 *        frameFeatureName: "feature3"
 *        RelativeDateRange(numDays: 5,
 *                          offset: 3)
 *   }
 */

record JoiningFeature {

  /**
   * Keys to join input with feature source, the field name of the key in the input featuized dataset.
   */
  keys: array[string]

  /**
   * Feature name as defined in feathr's feature definition configuration.
   *
   * Currently the column in the output FDS that holds this feature will have the same name as feature name.
   * If multiple joined features have the same name and no alias is defined for them, feathr will prepend the keys to the feature name.
   *
   * In the future, if "featureAlias" is not set, the column in the output FDS that holds this feature will have the same name as feature name.
   * If multiple joined features have the same name and no alias is defined for them, the join operation will fail
   * (to avoid produciing two columns in the output FDS with the same name).
   */
  frameFeatureName: string

  /**
   * The development of this is in progress. This is not in use for now.
   *
   * The name to be used for the column in the output FDS that contains the values from this joined feature.
   * If not set, the name of the feature (frameFeatureName) will be used for the output column.
   * For example, if the user request joining a feature named "careers_job_listTime" and provides no alias,
   * the output FDS will contain a column called "careers_job_listTime". However, if the user sets "featureAlias" to "list_time",
   * the column will be named "list_time".
   *
   * feature alias can be useful for in a few cases:
   *  - If the user prefers to use a name different than the feathr name in their model,
   * they can use an alias to control the name of the column in the output FDS.
   *  - Sometimes, the training datas needs to have two features that are from the same feathr feature.
   * For example, if we are modeing the problem of the probability of a member A (viewer) seeing the profile of member B
   * (viewee) and we want to use the skills of both viewer and viewee as features, we need to join feathr feature
   * "member_skills" of member A with feathr feature "member_skills" of member B. That is, the two features are the same
   * feature but for different entiity ids). The default behavior of join is to name the output column name using the feathr
   * feature name, but in a case like the above case, that would result in two columns with the same name,
   * which is not valid for FDS. In these cases, the user has to provide an alias for at least one of these joined features.
   * For example, the user can use featureAliases such as "viewer_skills" and "viewee_skills".
   * In these cases, featureAliases becomes mandatory.
   */
  featureAlias: optional string

  /**
   * dateRange is used in Time-based joins, which refers to the situation when one or multiple days of input data needs
   * to be used for training.
   * One of the common use cases where this is used, is in training with some time-insensitive features, or
   * training pipeline that always use the full day data, one day before running (since there is only partial data for today).
   * The time for the input featurized dataset can be set using this field.
   * Hourly data is not allowed in this case.
   *
   * For example,
   * a. startDate: "20200522", endDate: "20200525" implies this feature should be joined with the input data starting from
   * 22nd May 2020 to 25th May, 2020 with both dates included.
   * We only support yyyyMMdd format for this. In future, if there is a request, we can
   * add support for other date time formats as well.
   *
   * b. numDays - 5d implies, offset - 1d, if today's date is 11/09/2020, then the input data ranging from 11/08/2020
   * till 11/04/2020 willl be joined.
   *
   * P.S - This is different from the timeRange used in settings as the settings startTime is applicable for the entire input data,
   * while this a feature level setting. Also, we do not support hourly time here.
   */
  dateRange: optional union[absoluteDateRange: AbsoluteDateRange, relativeDateRange: RelativeDateRange]

  /**
   * The override time delay parameter which will override the global simulate time delay specified in the settings section for
   * the particular feature.
   * This parameter is only applicable when the simulate time delay is set in the settings section
   * For example, let us say the global simulate delay was 5d, and the overrideTimeDelay is set to 3d.
   * Then, for this specificc feature, a simulate delay of 3d will be applied.
   */
  overrideTimeDelay: optional TimeOffset
}
