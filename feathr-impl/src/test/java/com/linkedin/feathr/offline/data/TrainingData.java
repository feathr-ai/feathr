/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.feathr.offline.data;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TrainingData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TrainingData\",\"namespace\":\"com.linkedin.feathr.offline.data\",\"fields\":[{\"name\":\"IdInObservation\",\"type\":\"string\"},{\"name\":\"label\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence IdInObservation;
  @Deprecated public int label;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TrainingData() {}

  /**
   * All-args constructor.
   */
  public TrainingData(CharSequence IdInObservation, Integer label) {
    this.IdInObservation = IdInObservation;
    this.label = label;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return IdInObservation;
    case 1: return label;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: IdInObservation = (CharSequence)value$; break;
    case 1: label = (Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'IdInObservation' field.
   */
  public CharSequence getIdInObservation() {
    return IdInObservation;
  }

  /**
   * Sets the value of the 'IdInObservation' field.
   * @param value the value to set.
   */
  public void setIdInObservation(CharSequence value) {
    this.IdInObservation = value;
  }

  /**
   * Gets the value of the 'label' field.
   */
  public Integer getLabel() {
    return label;
  }

  /**
   * Sets the value of the 'label' field.
   * @param value the value to set.
   */
  public void setLabel(Integer value) {
    this.label = value;
  }

  /** Creates a new TrainingData RecordBuilder */
  public static com.linkedin.feathr.offline.data.TrainingData.Builder newBuilder() {
    return new com.linkedin.feathr.offline.data.TrainingData.Builder();
  }
  
  /** Creates a new TrainingData RecordBuilder by copying an existing Builder */
  public static com.linkedin.feathr.offline.data.TrainingData.Builder newBuilder(com.linkedin.feathr.offline.data.TrainingData.Builder other) {
    return new com.linkedin.feathr.offline.data.TrainingData.Builder(other);
  }
  
  /** Creates a new TrainingData RecordBuilder by copying an existing TrainingData instance */
  public static com.linkedin.feathr.offline.data.TrainingData.Builder newBuilder(com.linkedin.feathr.offline.data.TrainingData other) {
    return new com.linkedin.feathr.offline.data.TrainingData.Builder(other);
  }
  
  /**
   * RecordBuilder for TrainingData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TrainingData>
    implements org.apache.avro.data.RecordBuilder<TrainingData> {

    private CharSequence IdInObservation;
    private int label;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.feathr.offline.data.TrainingData.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.feathr.offline.data.TrainingData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.IdInObservation)) {
        this.IdInObservation = data().deepCopy(fields()[0].schema(), other.IdInObservation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.label)) {
        this.label = data().deepCopy(fields()[1].schema(), other.label);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TrainingData instance */
    private Builder(com.linkedin.feathr.offline.data.TrainingData other) {
            super(com.linkedin.feathr.offline.data.TrainingData.SCHEMA$);
      if (isValidValue(fields()[0], other.IdInObservation)) {
        this.IdInObservation = data().deepCopy(fields()[0].schema(), other.IdInObservation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.label)) {
        this.label = data().deepCopy(fields()[1].schema(), other.label);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'IdInObservation' field */
    public CharSequence getIdInObservation() {
      return IdInObservation;
    }
    
    /** Sets the value of the 'IdInObservation' field */
    public com.linkedin.feathr.offline.data.TrainingData.Builder setIdInObservation(CharSequence value) {
      validate(fields()[0], value);
      this.IdInObservation = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'IdInObservation' field has been set */
    public boolean hasIdInObservation() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'IdInObservation' field */
    public com.linkedin.feathr.offline.data.TrainingData.Builder clearIdInObservation() {
      IdInObservation = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'label' field */
    public Integer getLabel() {
      return label;
    }
    
    /** Sets the value of the 'label' field */
    public com.linkedin.feathr.offline.data.TrainingData.Builder setLabel(int value) {
      validate(fields()[1], value);
      this.label = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'label' field has been set */
    public boolean hasLabel() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'label' field */
    public com.linkedin.feathr.offline.data.TrainingData.Builder clearLabel() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public TrainingData build() {
      try {
        TrainingData record = new TrainingData();
        record.IdInObservation = fieldSetFlags()[0] ? this.IdInObservation : (CharSequence) defaultValue(fields()[0]);
        record.label = fieldSetFlags()[1] ? this.label : (Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
