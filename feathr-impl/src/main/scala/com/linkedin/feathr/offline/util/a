ENABLE_DEBUG_OUTPUT  -> (SQLConf.buildConf(getFullConfigKeyName(ENABLE_DEBUG_OUTPUT )).stringConf.createOptional, "true"),
DEBUG_FEATURE_NAMES  -> (SQLConf.buildConf(getFullConfigKeyName(DEBUG_FEATURE_NAMES )).stringConf.createOptional, ""),
DEBUG_OUTPUT_PATH  -> (SQLConf.buildConf(getFullConfigKeyName(DEBUG_OUTPUT_PATH )).stringConf.createOptional, "/tmp/debug/feathr/output"),
CHECKPOINT_OUTPUT_PATH  -> (SQLConf.buildConf(getFullConfigKeyName(CHECKPOINT_OUTPUT_PATH )).stringConf.createOptional, "/tmp/feathr/checkpoints"),
ENABLE_CHECKPOINT  -> (SQLConf.buildConf(getFullConfigKeyName(ENABLE_CHECKPOINT )).stringConf.createOptional, "false"),
    // Check point every {CHECKPOINT_FREQUENCY} dataframes
CHECKPOINT_FREQUENCY  -> (SQLConf.buildConf(getFullConfigKeyName(CHECKPOINT_FREQUENCY )).stringConf.createOptional, "10"),
DEBUG_OUTPUT_PART_NUM  -> (SQLConf.buildConf(getFullConfigKeyName(DEBUG_OUTPUT_PART_NUM )).stringConf.createOptional, "200"),
FAIL_ON_MISSING_PARTITION  -> (SQLConf.buildConf(getFullConfigKeyName(FAIL_ON_MISSING_PARTITION )).stringConf.createOptional, "false"),
SEQ_JOIN_ARRAY_EXPLODE_ENABLED  -> (SQLConf.buildConf(getFullConfigKeyName(SEQ_JOIN_ARRAY_EXPLODE_ENABLED )).stringConf.createOptional, "true"),
ENABLE_SALTED_JOIN  -> (SQLConf.buildConf(getFullConfigKeyName(ENABLE_SALTED_JOIN )).stringConf.createOptional, "false"),
SKIP_MISSING_FEATURE  -> (SQLConf.buildConf(getFullConfigKeyName(SKIP_MISSING_FEATURE )).stringConf.createOptional, "false"),
MAX_DATA_LOAD_RETRY -> (SQLConf.buildConf(getFullConfigKeyName(MAX_DATA_LOAD_RETRY)).stringConf.createOptional, "0"),
DATA_LOAD_WAIT_IN_MS -> (SQLConf.buildConf(getFullConfigKeyName(DATA_LOAD_WAIT_IN_MS)).stringConf.createOptional, "1"),
    // If one key appears more than 0.02% in the dataset, we will salt this join key and split them into multiple partitions
    // This is an empirical value
SALTED_JOIN_FREQ_ITEM_THRESHOLD  -> (SQLConf.buildConf(getFullConfigKeyName(SALTED_JOIN_FREQ_ITEM_THRESHOLD )).stringConf.createOptional, "0.0002"),
SALTED_JOIN_REPLICATION_FACTOR_HIGH  -> (SQLConf.buildConf(getFullConfigKeyName(SALTED_JOIN_REPLICATION_FACTOR_HIGH )).stringConf.createOptional, "10"),
SALTED_JOIN_FREQ_ITEM_ESTIMATOR  -> (SQLConf.buildConf(getFullConfigKeyName(SALTED_JOIN_FREQ_ITEM_ESTIMATOR )).stringConf.createOptional, "spark"),
ENABLE_SLICK_JOIN  -> (SQLConf.buildConf(getFullConfigKeyName(ENABLE_SLICK_JOIN )).stringConf.createOptional, "false"),
SALTED_JOIN_PERSIST  -> (SQLConf.buildConf(getFullConfigKeyName(SALTED_JOIN_PERSIST )).stringConf.createOptional, "true"),
ROW_BLOOMFILTER_MAX_THRESHOLD  -> (SQLConf.buildConf(getFullConfigKeyName(ROW_BLOOMFILTER_MAX_THRESHOLD )).stringConf.createOptional, "-1"),
    // We found that if we have too many parallelism, then during the join shuffling, memoryOverhead could be too high,
ENABLE_METRICS  -> (SQLConf.buildConf(getFullConfigKeyName(ENABLE_METRICS )).stringConf.createOptional, "false"),
    // cap it to 10000 to make sure memoryOverhead is less than 2g (Feathr default value)
SPARK_JOIN_MAX_PARALLELISM  -> (SQLConf.buildConf(getFullConfigKeyName(SPARK_JOIN_MAX_PARALLELISM )).stringConf.createOptional, "10000"),
SPARK_JOIN_MIN_PARALLELISM  -> (SQLConf.buildConf(getFullConfigKeyName(SPARK_JOIN_MIN_PARALLELISM )).stringConf.createOptional, "10"),
ENABLE_SANITY_CHECK_MODE  -> (SQLConf.buildConf(getFullConfigKeyName(ENABLE_SANITY_CHECK_MODE )).stringConf.createOptional, "false"),
SANITY_CHECK_MODE_ROW_COUNT  -> (SQLConf.buildConf(getFullConfigKeyName(SANITY_CHECK_MODE_ROW_COUNT )).stringConf.createOptional, "10"))
 